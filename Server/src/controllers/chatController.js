// controllers/chatController.js
const Place = require('../models/Place');
const { chatWithLLM } = require('../services/Chatbot/aiClient');
const { getWeather } = require('../services/Chatbot/weather');
const { extractCity } = require('../services/Chatbot/extractCity');
const { getSession, setSession, clearSession } = require('../utils/session');
const { set } = require('mongoose');
// Ph√¢n lo·∫°i intent
async function classifyQuestion(question) {
  const systemPrompt = {
    role: 'system',
    content: `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch.
Ph√¢n lo·∫°i c√¢u h·ªèi ng∆∞·ªùi d√πng th√†nh 4 lo·∫°i:
1. greeting ‚Üí c√¢u ch√†o
2. travel ‚Üí c√¢u h·ªèi li√™n quan du l·ªãch (ƒë·ªãa ƒëi·ªÉm, th·ªùi ti·∫øt, kh√°ch s·∫°n, ƒÉn u·ªëng, ph∆∞∆°ng ti·ªán, l·ªãch tr√¨nh, chi ph√≠...)
3. plan_trip ‚Üí  y√™u c·∫ßu t·∫°o l·ªãch tr√¨nh du l·ªãch (v√≠ d·ª•: "l·∫≠p k·∫ø ho·∫°ch ƒëi C·∫ßn Th∆° 2 ng√†y 1 ƒë√™m")
4. other ‚Üí c√°c c√¢u h·ªèi kh√°c ngo√†i du l·ªãch
Tr·∫£ v·ªÅ duy nh·∫•t 1 t·ª´: greeting, travel, plan_trip, other
`
  };
  const userMessage = { role: 'user', content: question };
  const response = await chatWithLLM([systemPrompt, userMessage]);
  const category = response.trim().toLowerCase();
  if (['greeting', 'travel', 'plan_trip', 'other'].includes(category))
    return category;
  return 'other';
}

// Ki·ªÉm tra c√¢u h·ªèi v·ªÅ th·ªùi ti·∫øt
function isWeatherQuestion(question) {
  const q = question.toLowerCase();
  return q.includes('th·ªùi ti·∫øt') || q.includes('weather');
}

// T·∫°o l·ªãch tr√¨nh t·ª´ Place
async function createTripPlan(city, numDays = 1) {
  // L·∫•y t·∫•t c·∫£ c√°c place ·ªü city
  const places = await Place.find({ address: { $regex: city, $options: 'i' } });

  if (!places.length) return null;

  // Chia l·ªãch tr√¨nh theo ng√†y
  const plan = [];
  const activitiesPerDay = Math.ceil(places.length / numDays);

  for (let day = 1; day <= numDays; day++) {
    const start = (day - 1) * activitiesPerDay;
    const end = start + activitiesPerDay;
    const dayPlaces = places.slice(start, end);

    const dayPlan = {
      day,
      activities: dayPlaces.map((p) => ({
        name: p.name,
        type: p.type,
        address: p.address,
        description: p.description,
        cost: p.avgPrice || 0
      }))
    };

    plan.push(dayPlan);
  }

  return plan;
}
function formatTripPlan(tripPlan, numDays, city) {
  let totalCost = 0;
  let planText = `L·ªãch tr√¨nh ${numDays} ng√†y ·ªü ${city}:\n\n`;
  tripPlan.forEach((day) => {
    planText += `Ng√†y ${day.day}:\n`;
    day.activities.forEach((act, idx) => {
      planText += `${idx + 1}. ${act.name} (${act.type}) - ${
        act.address
      } - chi ph√≠: ${act.cost} VND\n`;
      totalCost += act.cost;
    });
    planText += '\n';
  });
  planText += `T·ªïng chi ph√≠ ∆∞·ªõc t√≠nh: ${totalCost} VND`;
  return planText;
}

const ask = async (req, res) => {
  try {
    const { userId, question } = req.body;
    if (!question) return res.status(400).json({ message: 'Missing question' });

    const session = getSession(userId);
    console.log('Current session:', session);
    let answer = '';

    // N·∫øu ƒëang ch·ªù s·ªë ng√†y t·ª´ user
    if (session.awaitingDays && /^\d+\s*ng√†y?$/.test(question)) {
      const numDays = parseInt(question.match(/\d+/)[0]);
      const tripPlan = await createTripPlan(session.city, numDays);
      if (!tripPlan) {
        answer = `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${session.city}.`;
      } else {
        answer = formatTripPlan(tripPlan, numDays, session.city);
      }
      clearSession(userId);
    } else {
      const category = await classifyQuestion(question);
      console.log('Classified category:', category);

      if (category === 'greeting') {
        answer = 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ du l·ªãch. üòä';
      } else if (category === 'other') {
        answer = 'Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ du l·ªãch.';
      } else if (category === 'travel') {
        const cityToUse = session.city || (await extractCity(question));
        setSession(userId, { city: cityToUse });

        if (isWeatherQuestion(question)) {
          try {
            answer = await getWeather(cityToUse);
          } catch {
            answer = 'Xin l·ªói, t√¥i kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i.';
          }
        } else {
          // G·ª≠i prompt cho AI, k√®m city n·∫øu c√≥
          const messages = [
            {
              role: 'system',
              content:
                'B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán chuy√™n v·ªÅ DU L·ªäCH, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.'
            },
            {
              role: 'user',
              content: cityToUse
                ? `C√¢u h·ªèi: ${question}. Th√†nh ph·ªë li√™n quan: ${cityToUse}`
                : `C√¢u h·ªèi: ${question}`
            }
          ];
          answer = await chatWithLLM(messages);
        }
      } else if (category === 'plan_trip') {
        const city = await extractCity(question);
        const daysMatch = question.match(/(\d+)\s*ng√†y/);
        const numDays = daysMatch ? parseInt(daysMatch[1]) : null;

        if (!numDays) {
          answer = 'Vui l√≤ng cho bi·∫øt s·ªë ng√†y b·∫°n mu·ªën l·∫≠p k·∫ø ho·∫°ch du l·ªãch.';
          setSession(userId, { city, awaitingDays: true });
        } else {
          const tripPlan = await createTripPlan(city, numDays);
          if (!tripPlan) {
            answer = `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${city}.`;
          } else {
            answer = formatTripPlan(tripPlan, numDays, city);
          }
        }
      }
    }

    res.json({ answer });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: e.message });
  }
};

module.exports = { ask };
