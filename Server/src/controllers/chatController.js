const ChatMessage = require('../models/ChatMessage');
const Place = require('../models/Place');
const { chatWithLLM } = require('../utils/aiClient');
const { getWeather } = require('../services/Chatbot/weather');
const { extractCity } = require('../services/Chatbot/extractCity');
const {
  classifyQuestion,
  isWeatherQuestion,
  createTripPlan,
  formatTripPlanWithGPT,
  isPlaceListQuestion,
  getAvgCost,
  extractPlaceName,
  getPlaceInfo,
  formatPlaceInfoWithGPT
} = require('../services/Chatbot/chatbot');

function isTransportQuestion(question) {
  return /(ƒëi|t·ª´).+(ƒë·∫øn).+(b·∫±ng|ph∆∞∆°ng ti·ªán|xe|m√°y bay|t√†u)/i.test(question);
}

const ask = async (req, res) => {
  try {
    const { userId } = req.user;
    const { question } = req.body;
    if (!question) return res.status(400).json({ message: 'Missing question' });

    // L∆∞u c√¢u h·ªèi user
    await ChatMessage.create({ userId, role: 'user', content: question });

    let answer = '';
    let tripPlan = null;
    let cityToUse = null;
    // === 1. Ki·ªÉm tra xem user ƒëang tr·∫£ l·ªùi s·ªë ng√†y kh√¥ng ===
    if (/^\d+(\s*ng√†y)?$/.test(question)) {
      // T√¨m message g·∫ßn nh·∫•t c·ªßa user c√≥ awaitingDays = true
      const lastState = await ChatMessage.findOne({
        userId,
        awaitingDays: true
      }).sort({ createdAt: -1 });

      if (lastState) {
        const numDays = parseInt(question.match(/\d+/)[0]);
        tripPlan = await createTripPlan(lastState.city, numDays);

        answer = tripPlan
          ? await formatTripPlanWithGPT(tripPlan, numDays, lastState.city)
          : `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${lastState.city}.`;

        // L∆∞u message m·ªõi (kh√¥ng c·∫ßn awaitingDays n·ªØa)
        await ChatMessage.create({
          userId,
          role: 'assistant',
          content: answer,
          category: 'plan_trip',
          city: lastState.city,
          awaitingDays: false
        });
      }

      return res.json({
        answer,
        tripPlan,
        city: lastState.city,
        isTripPlan: tripPlan ? true : false
      });
    }
    if (isTransportQuestion(question)) {
      // L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i g·∫ßn ƒë√¢y
      const history = await ChatMessage.find({ userId })
        .sort({ createdAt: -1 })
        .limit(10)
        .lean();
      const messages = [
        {
          role: 'system',
          content: `B·∫°n l√† tr·ª£ l√Ω AI chuy√™n du l·ªãch, h√£y t∆∞ v·∫•n ph∆∞∆°ng ti·ªán ƒëi l·∫°i gi·ªØa c√°c t·ªânh th√†nh ·ªü Vi·ªát Nam.
              H√£y g·ª£i √Ω ph∆∞∆°ng ti·ªán r·∫ª nh·∫•t, nhanh nh·∫•t v√† h·ª£p l√Ω nh·∫•t. TR·∫¢ L·ªúI V·ªÄ D∆Ø·ªöI D·∫†NG HTML`
        },

        ...history
          .reverse()
          .filter((h) => h.role && h.content)
          .map((h) => ({ role: h.role, content: h.content })),
        { role: 'user', content: question }
      ];
      const answer = await chatWithLLM(messages);
      await ChatMessage.create({ userId, role: 'assistant', content: answer });
      return res.json({
        answer
      });
    }
    // === 2. Ph√¢n lo·∫°i c√¢u h·ªèi m·ªõi ===
    const category = await classifyQuestion(question);
    if (category === 'place_info') {
      const placeName = await extractPlaceName(question);
      const city = await extractCity(question);
      const place = await getPlaceInfo(placeName, city);
      const formatPlaceInfo = await formatPlaceInfoWithGPT(place);
      answer = `${formatPlaceInfo}`;
    } else if (category === 'greeting') {
      answer = 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ du l·ªãch. üòä';
    } else if (category === 'other') {
      answer = 'Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ du l·ªãch.';
    } else if (category === 'travel') {
      cityToUse = await extractCity(question);

      if (isWeatherQuestion(question)) {
        try {
          answer = await getWeather(cityToUse);
        } catch {
          answer = 'Xin l·ªói, t√¥i kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i.';
        }
      } else if (isPlaceListQuestion(question)) {
        const typeMap = {
          'kh√°ch s·∫°n': 'hotel',
          hotel: 'hotel',
          'nh√† h√†ng': 'restaurant',
          'ƒë·ªãa ƒëi·ªÉm ƒÉn u·ªëng': 'restaurant',
          'qu√°n ƒÉn': 'restaurant',
          cafe: 'cafe',
          'qu√°n c√† ph√™': 'cafe',
          'ƒëi·ªÉm vui ch∆°i': 'touristSpot',
          'ƒëi·ªÉm tham quan': 'touristSpot',
          'ƒëi·ªÉm du l·ªãch': 'touristSpot',
          'tourist spot': 'touristSpot'
        };

        let foundType = null;
        for (const key of Object.keys(typeMap)) {
          if (question.toLowerCase().includes(key)) {
            foundType = typeMap[key];
            break;
          }
        }

        const places = await Place.find({
          address: { $regex: cityToUse, $options: 'i' },
          type: foundType
        })
          .lean()
          .sort({ bookingCount: -1 })
          .limit(5);
        const placesWithAvg = places.map((p) => {
          return {
            ...p,
            avgPrice: getAvgCost(p)
          };
        });
        if (!placesWithAvg.length) {
          answer = `Xin l·ªói, t√¥i ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ ${
            foundType || 'ƒë·ªãa ƒëi·ªÉm'
          } ·ªü ${cityToUse}.`;
        } else {
          const placeType =
            foundType === 'touristSpot'
              ? 'ƒê·ªãa ƒëi·ªÉm du l·ªãch'
              : foundType === 'cafe'
              ? 'Qu√°n cafe'
              : foundType === 'hotel'
              ? 'ƒê·ªãa ƒëi·ªÉm l∆∞u tr√∫'
              : 'ƒê·ªãa ƒëi·ªÉm ƒÉn u·ªëng';
          answer =
            `M·ªôt s·ªë ${placeType} n·ªïi b·∫≠t t·∫°i ${cityToUse}:\n` +
            placesWithAvg
              .map(
                (p, i) =>
                  `<p>${i + 1}. ${p.name} - ${p.address}</p>
                    <a href="http://localhost:5173/place/${
                      p._id
                    }" target="_blank" style="color:#1677ff;text-decoration:none;">
  üîó Xem chi ti·∫øt
</a>
                 ${p.description} - Gi√° trung b√¨nh: ${
                    p.avgPrice || 'Kh√¥ng c√≥ th√¥ng tin v·ªÅ gi√° c√°c d·ªãch v·ª•'
                  } ${
                    p.avgPrice
                      ? foundType === 'hotel'
                        ? 'VND/ƒë√™m'
                        : foundType === 'restaurant'
                        ? 'VND/ng∆∞·ªùi'
                        : foundType === 'cafe'
                        ? 'VND/d·ªãch v·ª•'
                        : foundType === 'touristSpot'
                        ? 'VND/d·ªãch v·ª•'
                        : ''
                      : ''
                  }`
              )
              .join('\n\n');
        }
      } else {
        // fallback AI
        const history = await ChatMessage.find({ userId })
          .sort({ createdAt: -1 })
          .limit(10)
          .lean();

        const messages = [
          {
            role: 'system',
            content:
              'B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán chuy√™n v·ªÅ DU L·ªäCH, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.'
          },
          ...history
            .reverse()
            .filter((h) => h.role && h.content)
            .map((h) => ({ role: h.role, content: h.content })),
          { role: 'user', content: question }
        ];

        answer = await chatWithLLM(messages);
      }
      await ChatMessage.create({
        userId,
        role: 'assistant',
        content: answer,
        city: cityToUse
      });
    } else if (category === 'plan_trip') {
      cityToUse = await extractCity(question);

      // N·∫øu kh√¥ng c√≥ city trong c√¢u h·ªèi, l·∫•y t·ª´ message g·∫ßn nh·∫•t
      if (cityToUse === 'NULL') {
        const lastCityMsg = await ChatMessage.findOne({
          userId,
          city: { $exists: true, $ne: 'NULL' }
        }).sort({ createdAt: -1 });
        if (lastCityMsg) cityToUse = lastCityMsg.city;
      }

      const daysMatch = question.match(/(\d+)\s*ng√†y/);
      const numDays = daysMatch ? parseInt(daysMatch[1]) : null;

      if (!numDays) {
        answer =
          'Vui l√≤ng cho bi·∫øt s·ªë ng√†y b·∫°n mu·ªën l·∫≠p k·∫ø ho·∫°ch du l·ªãch. ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n t·∫°o k·∫ø ho·∫°ch.';

        await ChatMessage.create({
          userId,
          role: 'assistant',
          content: answer,
          category,
          city: cityToUse,
          awaitingDays: true
        });
      } else {
        tripPlan = await createTripPlan(cityToUse, numDays);
        answer = tripPlan
          ? await formatTripPlanWithGPT(tripPlan, numDays, cityToUse)
          : `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${cityToUse}.`;

        await ChatMessage.create({
          userId,
          role: 'assistant',
          content: answer,
          category,
          city: cityToUse
        });
      }
    }

    res.json({
      answer,
      tripPlan,
      city: cityToUse || '',
      isTripPlan: tripPlan ? true : false
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: e.message });
  }
};

module.exports = { ask };
