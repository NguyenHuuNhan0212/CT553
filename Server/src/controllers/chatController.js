// controllers/chatController.js
const Place = require('../models/Place');
const { chatWithLLM } = require('../services/Chatbot/aiClient');
const { getWeather } = require('../services/Chatbot/weather');
const { extractCity } = require('../services/Chatbot/extractCity');
const { getSession, setSession, clearSession } = require('../utils/session');
const {
  classifyQuestion,
  isWeatherQuestion,
  createTripPlan,
  formatTripPlanWithGPT,
  isPlaceListQuestion
} = require('../utils/chatbot');

const ask = async (req, res) => {
  try {
    const { userId, question } = req.body;
    if (!question) return res.status(400).json({ message: 'Missing question' });

    const session = getSession(userId);
    console.log('Current session:', session);
    let answer = '';

    // N·∫øu ƒëang ch·ªù s·ªë ng√†y t·ª´ user
    if (session.awaitingDays && /^\d+(\s*ng√†y)?$/.test(question)) {
      const numDays = parseInt(question.match(/\d+/)[0]);
      const tripPlan = await createTripPlan(session.city, numDays);
      if (!tripPlan) {
        answer = `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${session.city}.`;
      } else {
        answer = await formatTripPlanWithGPT(tripPlan, numDays, session.city);
      }
      clearSession(userId);
    } else {
      const category = await classifyQuestion(question);
      console.log('Classified category:', category);

      if (category === 'greeting') {
        answer = 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ du l·ªãch. üòä';
      } else if (category === 'other') {
        answer = 'Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ du l·ªãch.';
      } else if (category === 'travel') {
        const cityToUse = session.city || (await extractCity(question));
        setSession(userId, { city: cityToUse });

        if (isWeatherQuestion(question)) {
          try {
            answer = await getWeather(cityToUse);
          } catch {
            answer = 'Xin l·ªói, t√¥i kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i.';
          }
        } // N·∫øu h·ªèi danh s√°ch place (kh√°ch s·∫°n, qu√°n cafe, ‚Ä¶)
        else if (isPlaceListQuestion(question)) {
          const typeMap = {
            'kh√°ch s·∫°n': 'hotel',
            hotel: 'hotel',
            'nh√† h√†ng': 'restaurant',
            'qu√°n ƒÉn': 'restaurant',
            cafe: 'cafe',
            'qu√°n c√† ph√™': 'cafe',
            'ƒëi·ªÉm vui ch∆°i': 'touristSpot',
            'ƒëi·ªÉm tham quan': 'touristSpot',
            'tourist spot': 'touristSpot'
          };

          let foundType = null;
          for (const key of Object.keys(typeMap)) {
            if (question.toLowerCase().includes(key)) {
              foundType = typeMap[key];
              break;
            }
          }

          const places = await Place.find({
            address: { $regex: cityToUse, $options: 'i' },
            type: foundType
          });

          if (!places.length) {
            answer = `Xin l·ªói, t√¥i ch∆∞a c√≥ d·ªØ li·ªáu v·ªÅ ${
              foundType || 'ƒë·ªãa ƒëi·ªÉm'
            } ·ªü ${cityToUse}.`;
          } else {
            answer =
              `M·ªôt s·ªë ${foundType} n·ªïi b·∫≠t t·∫°i ${cityToUse}:\n` +
              places
                .map(
                  (p, i) =>
                    `${i + 1}. ${p.name} - ${p.address} - ${
                      p.description
                    } - Gi√° trung b√¨nh: ${p.avgPrice || 'N/A'} VND${
                      foundType === 'hotel'
                        ? '/ƒë√™m'
                        : foundType === 'restaurant'
                        ? '/ng∆∞·ªùi'
                        : foundType === 'cafe'
                        ? '/ly'
                        : foundType === 'touristSpot'
                        ? '/v√©'
                        : ''
                    }`
                )
                .join('\n\n');
          }
        } else {
          // G·ª≠i prompt cho AI, k√®m city n·∫øu c√≥
          const messages = [
            {
              role: 'system',
              content:
                'B·∫°n l√† tr·ª£ l√Ω AI th√¢n thi·ªán chuy√™n v·ªÅ DU L·ªäCH, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.'
            },
            {
              role: 'user',
              content: cityToUse
                ? `C√¢u h·ªèi: ${question}. Th√†nh ph·ªë li√™n quan: ${cityToUse}`
                : `C√¢u h·ªèi: ${question}`
            }
          ];
          answer = await chatWithLLM(messages);
        }
      } else if (category === 'plan_trip') {
        const city = await extractCity(question);
        const daysMatch = question.match(/(\d+)\s*ng√†y/);
        const numDays = daysMatch ? parseInt(daysMatch[1]) : null;

        if (!numDays) {
          answer = 'Vui l√≤ng cho bi·∫øt s·ªë ng√†y b·∫°n mu·ªën l·∫≠p k·∫ø ho·∫°ch du l·ªãch.';
          setSession(userId, { city, awaitingDays: true });
        } else {
          const tripPlan = await createTripPlan(city, numDays);
          if (!tripPlan) {
            answer = `Xin l·ªói, hi·ªán t·∫°i t√¥i kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm ·ªü ${city}.`;
          } else {
            answer = await formatTripPlanWithGPT(tripPlan, numDays, city);
          }
        }
      }
    }

    res.json({ answer });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: e.message });
  }
};

module.exports = { ask };
