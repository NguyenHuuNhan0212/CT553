// controllers/chatController.js
const ChatMessage = require('../models/ChatMessage');
const { chatWithLLM } = require('../services/Chatbot/aiClient');
const { getWeather } = require('../services/Chatbot/weather');
const { extractCity } = require('../services/Chatbot/extractCity');

async function classifyQuestion(question) {
  const systemPrompt = {
    role: 'system',
    content: `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán v√† h·ªØu √≠ch.
Nhi·ªám v·ª•: Ph√¢n lo·∫°i c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng th√†nh 3 lo·∫°i:
1. greeting ‚Üí c√¢u ch√†o, v√≠ d·ª•: "xin ch√†o", "hello"
2. travel ‚Üí c√¢u h·ªèi li√™n quan du l·ªãch (ƒë·ªãa ƒëi·ªÉm, th·ªùi ti·∫øt, kh√°ch s·∫°n, ƒÉn u·ªëng, ph∆∞∆°ng ti·ªán, l·ªãch tr√¨nh, chi ph√≠...)
3. other ‚Üí c√°c c√¢u h·ªèi kh√°c ngo√†i du l·ªãch
Tr·∫£ v·ªÅ duy nh·∫•t m·ªôt t·ª´: greeting, travel, ho·∫∑c other.
`
  };

  const userMessage = { role: 'user', content: question };
  const response = await chatWithLLM([systemPrompt, userMessage]);
  const category = response.trim().toLowerCase();
  if (['greeting', 'travel', 'other'].includes(category)) return category;
  return 'other';
}

function isWeatherQuestion(question) {
  const q = question.toLowerCase();
  return q.includes('th·ªùi ti·∫øt') || q.includes('weather');
}

const ask = async (req, res) => {
  try {
    const { userId, question } = req.body;
    if (!question) return res.status(400).json({ message: 'Missing question' });

    const category = await classifyQuestion(question);

    let answer = '';

    if (category === 'greeting') {
      answer = 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªÅ du l·ªãch. üòä';
    } else if (category === 'other') {
      answer = 'Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ du l·ªãch.';
    } else if (category === 'travel') {
      if (isWeatherQuestion(question)) {
        const city = await extractCity(question);
        try {
          answer = await getWeather(city);
        } catch (err) {
          answer = 'Xin l·ªói, t√¥i kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i.';
        }
      } else {
        const history = await ChatMessage.find({ userId })
          .sort({ createdAt: -1 })
          .limit(8);
        const historyMsgs = history.reverse().map((h) => ({
          role: h.role === 'assistant' ? 'assistant' : 'user',
          content: h.content
        }));

        const system = {
          role: 'system',
          content: `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán chuy√™n v·ªÅ DU L·ªäCH.
Tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn ƒë·ªãa ƒëi·ªÉm, kh√°ch s·∫°n, ƒÉn u·ªëng, ph∆∞∆°ng ti·ªán, l·ªãch tr√¨nh, chi ph√≠...
Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu v√† th√¢n thi·ªán.
N·∫øu c√¢u h·ªèi KH√îNG li√™n quan ƒë·∫øn du l·ªãch, tr·∫£ l·ªùi: "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ v·ªÅ du l·ªãch."
`
        };

        const messages = [
          ...historyMsgs,
          system,
          { role: 'user', content: question }
        ];
        answer = await chatWithLLM(messages);
      }
    }

    await ChatMessage.create({
      userId: userId || null,
      role: 'user',
      content: question
    });
    await ChatMessage.create({
      userId: userId || null,
      role: 'assistant',
      content: answer
    });

    res.json({ answer });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: e.message });
  }
};

module.exports = { ask };
